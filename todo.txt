=Goals
CleanCode Quake2 aims to provide a modular and object-oriented experience to writing, changing and manipulating the Quake2 game source base. CCQ2 will include macros for features so you can easily take out features you don't want (such as Quad Damage or invulnerability), plus a bunch of new and exciting features never before seen in Quake 2 that have been easily created because of object-orientated code.

=C/C++ 

- Write wrappers for the gi.write crap functions (so we don't have to call 40 write's just to, say, spawn a temp entity, we should just be able to use a basic read-only class like TempEnts->Particles.Explosion1(origin)
- Entity system needs a complete re-write. I'm thinking splitting it into some sort of inheretence system or something. The server needs the first few arguments of edict_s to be exactly the same in the same order, so that should stay a structure, and from there is where linkentity/unlinkentity/spawn would be handled, but from there other classes can inherit edict_s (have different types of entities, like Player entity has all the air_finished crap and stuff, monsters have monsterinfo, projectiles have different physics and stuff). Also, there should be a class for an entity that does not get passed to the server, as there are many cases where that would be useful.
- Monsters definitely need to be re-done. Their files are way too hefty than they should be.
- A bunch of the combat handlers need to be re-written as well. T_Damage and it's linked functions can be cut down
- The spawn fields and SpawnEntity should also be handled differently, as it's probably the slowest portion of the entire game.
- Physics system should be re-written too so that it can have a bunch of handlers in the future
- Weapons system needs to be re-written (see Items System below)
- Items system needs to be re-written for many reasons. The itemlist in Quake2 takes up a big chunk of g_items.c; I'm thinking we go with a dynamic memory system instead, that way programmers can add indices without having to deal with an actual structure (and can go like, itemlist->addWeapon()). Also, remove the need for ITEM_INDEX and FindItem; these two are very slow and don't even NEED to be used! FindItemByClassname needs to be kept because of SpawnEntities, however.
- Instead of Vector* functions, use the Vector class. Only problem is the state structure, server requires vectors to be in float[3], so we need to do an entity finalize or something.

=Features

- Physic improvements! Goddamn Quake2 contains worse physics than the original Quake. As always, physics improvements will be modular with macros to enable/disable (just in case people want to keep original feels for compatibility reasons) them. Grenades will no longer be able to get stuck on inclines, for a start. Eventually things such as grenades going through elevators that are moving and trains getting "blocked" on moving multiple players at the same time will be fixed.
- Many many modular examples. One that I will do personally is implement QuakeMatt's "Gyro" engine into Quake 2.
- Bug-free environment and hopefully every original bug imaginable will be fixed, plus ones you never thought of, such as removing non-looping speakers and replacing them with positional sounds to save on entity space (they still pass and can even cause an overflow, so doing that would help huge SP maps big time)